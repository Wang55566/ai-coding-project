services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: task-management-app-${DOCKER_ENV:-dev}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_TELEMETRY_DISABLED=1
      - WATCHPACK_POLLING=${WATCHPACK_POLLING:-true}
    env_file:
      - .env.local
    restart: ${RESTART_POLICY:-unless-stopped}
    # 開發模式：掛載原始碼進行熱重載
    volumes:
      - .:/app
      - /app/.next
    # 根據環境切換命令
    command: >
      sh -c "
        if [ \"$${DOCKER_ENV:-dev}\" = \"prod\" ]; then
          export NODE_ENV=production && node server.js;
        else
          export NODE_ENV=development && npm run dev;
        fi
      "
    # 開發模式專用設定
    stdin_open: true
    tty: true
    # 生產模式專用設定
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # 生產模式資源限制
    deploy:
      resources:
        limits:
          memory: ${MEMORY_LIMIT:-512M}
          cpus: ${CPU_LIMIT:-0.5}
        reservations:
          memory: ${MEMORY_RESERVATION:-256M}
          cpus: ${CPU_RESERVATION:-0.25}
    networks:
      - app-network

networks:
  app-network:
    driver: bridge